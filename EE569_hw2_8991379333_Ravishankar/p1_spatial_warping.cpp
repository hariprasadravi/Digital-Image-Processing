// EE569 Homework Assignment #2// Date:     Oct 9, 2016// Name:     Hariprasad Ravishankar// ID:       8991379333// Email:    hravisha@usc.edu#include <stdio.h>#include <iostream>#include <stdlib.h>using namespace std;int main(int argc, char *argv[]){	// Define file pointer and variables	FILE *file;	int BytesPerPixel;	int Sizeh = 256;	int Sizew = 256;		// Check for proper syntax	if (argc < 3){		cout << "Syntax Error - Incorrect Parameter Usage:" << endl;		cout << "program_name input_image.raw output_image.raw [BytesPerPixel = 1] [Width = 256] [Height = 256]" << endl;		return 0;	}		// Check if image is grayscale or color	if (argc < 4){		BytesPerPixel = 1; // default is grey image	} 	else {		BytesPerPixel = atoi(argv[3]);		// Check if size is specified		if (argc >= 5){			Sizew = atoi(argv[4]);			Sizeh = atoi(argv[5]);		}	}		// Allocate image data array	unsigned char Imagedata[Sizeh][Sizew][BytesPerPixel];	// Read image (filename specified by first argument) into image data matrix	if (!(file=fopen(argv[1],"rb"))) {		cout << "Cannot open file: " << argv[1] <<endl;		exit(1);	}	fread(Imagedata, sizeof(unsigned char), Sizew*Sizeh*BytesPerPixel, file);	fclose(file);	///////////////////////// INSERT YOUR PROCESSING CODE HERE /////////////////////////	/////////// initializing output file //////	unsigned char NewImagedata[Sizeh][Sizew][BytesPerPixel];	double x_,y_,a,b;	int nearest_x,nearest_y;	for(int k=0; k< BytesPerPixel;k++){		for(int i=0;i<Sizeh;i++){			for(int j=0;j<Sizew;j++){				// Line Equations for Triangle 1 //				if((i + j -149 >=0) && (j-i >=0) && (j <= 149) ){					x_ = i + 0.9867*j -147.0133;					y_ = 1.9867*j -147.0133;					a = x_ - (int)x_;					b = y_ - (int)y_;					nearest_x = (int)x_;					nearest_y = (int)y_;					// interpolation //												NewImagedata[i][j][k] = (unsigned char)(int)(((1-b)*(((1-a)*(int)Imagedata[nearest_x][nearest_y][k]) + (a*(int)Imagedata[nearest_x+1][nearest_y][k]))) + b*(((1-a)*(int)Imagedata[nearest_x][nearest_y+1][k]) + (a*(int)Imagedata[nearest_x+1][nearest_y+1][k])));				}				// Line Equations for Triangle 2 //				else if((j-1.0067*i <= 149) && (j >= 149) && (j + i <= 299)){					x_ = i -0.9867*j + 147.0133;					y_ = 2*j - 149;					a = x_ - (int)x_;					b = y_ - (int)y_;					nearest_x = (int)x_;					nearest_y = (int)y_;					// interpolation //												NewImagedata[i][j][k] = (unsigned char)(int)(((1-b)*(((1-a)*(int)Imagedata[nearest_x][nearest_y][k]) + (a*(int)Imagedata[nearest_x+1][nearest_y][k]))) + b*(((1-a)*(int)Imagedata[nearest_x][nearest_y+1][k]) + (a*(int)Imagedata[nearest_x+1][nearest_y+1][k])));				}				// Line Equations for Triangle 3 //				else if((j + i >= 299) && (j-1.0067*i <= 149) && (i<=149)){					x_ = 1.9867*i -147.013;					y_ = -1*i + j + 149;					a = x_ - (int)x_;					b = y_ - (int)y_;					nearest_x = (int)x_;					nearest_y = (int)y_;										// interpolation //												NewImagedata[i][j][k] = (unsigned char)(int)(((1-b)*(((1-a)*(int)Imagedata[nearest_x][nearest_y][k]) + (a*(int)Imagedata[nearest_x+1][nearest_y][k]))) + b*(((1-a)*(int)Imagedata[nearest_x][nearest_y+1][k]) + (a*(int)Imagedata[nearest_x+1][nearest_y+1][k])));				}				// Line Equations for Triangle 4 //				else if((i+j <= 448) && (j-i >=0) && (i>=149)){					x_ = 2*i -149;					y_ = i + j -149;					a = x_ - (int)x_;					b = y_ - (int)y_;					nearest_x = (int)x_;					nearest_y = (int)y_;					// interpolation //												NewImagedata[i][j][k] = (unsigned char)(int)(((1-b)*(((1-a)*(int)Imagedata[nearest_x][nearest_y][k]) + (a*(int)Imagedata[nearest_x+1][nearest_y][k]))) + b*(((1-a)*(int)Imagedata[nearest_x][nearest_y+1][k]) + (a*(int)Imagedata[nearest_x+1][nearest_y+1][k])));				}				// Line Equations for Triangle 5 //				else if((i+j <= 448) && (j-i <=0) && (j>=149)){					x_ = i+j -149;					y_ = 2*j - 149;					a = x_ - (int)x_;					b = y_ - (int)y_;					nearest_x = (int)x_;					nearest_y = (int)y_;					// interpolation //												NewImagedata[i][j][k] = (unsigned char)(int)(((1-b)*(((1-a)*(int)Imagedata[nearest_x][nearest_y][k]) + (a*(int)Imagedata[nearest_x+1][nearest_y][k]))) + b*(((1-a)*(int)Imagedata[nearest_x][nearest_y+1][k]) + (a*(int)Imagedata[nearest_x+1][nearest_y+1][k])));				}				// Line Equations for Triangle 6 //				else if((j - 0.993*i >= -147.907) && (j + i >= 299) && (j<=149)){					x_ = i -j + 149;					y_ = 1.9867*j -147.0133;					a = x_ - (int)x_;					b = y_ - (int)y_;					nearest_x = (int)x_;					nearest_y = (int)y_;											// interpolation //												NewImagedata[i][j][k] = (unsigned char)(int)(((1-b)*(((1-a)*(int)Imagedata[nearest_x][nearest_y][k]) + (a*(int)Imagedata[nearest_x+1][nearest_y][k]))) + b*(((1-a)*(int)Imagedata[nearest_x][nearest_y+1][k]) + (a*(int)Imagedata[nearest_x+1][nearest_y+1][k])));				}				// Line Equations for Triangle 7 //				else if((j - 0.993*i >= -147.907) && (j + i <= 299) && (i>=149)){					x_ = 2*i -149;					y_ = -0.9867*i + j + 147.0133;					a = x_ - (int)x_;					b = y_ - (int)y_;					nearest_x = (int)x_;					nearest_y = (int)y_;											// interpolation //							NewImagedata[i][j][k] = (unsigned char)(int)(((1-b)*(((1-a)*(int)Imagedata[nearest_x][nearest_y][k]) + (a*(int)Imagedata[nearest_x+1][nearest_y][k]))) + b*(((1-a)*(int)Imagedata[nearest_x][nearest_y+1][k]) + (a*(int)Imagedata[nearest_x+1][nearest_y+1][k])));				}				// Line Equations for Triangle 8 //				else if((i + j -149 >=0) && (j-i <=0) && (i<=149)){					x_ = 1.9867*i -147.0133;					y_ = 0.9867*i + j -147.01333;					a = x_ - (int)x_;					b = y_ - (int)y_;					nearest_x = (int)x_;					nearest_y = (int)y_;										// interpolation //						NewImagedata[i][j][k] = (unsigned char)(int)(((1-b)*(((1-a)*(int)Imagedata[nearest_x][nearest_y][k]) + (a*(int)Imagedata[nearest_x+1][nearest_y][k]))) + b*(((1-a)*(int)Imagedata[nearest_x][nearest_y+1][k]) + (a*(int)Imagedata[nearest_x+1][nearest_y+1][k])));				}				else{					NewImagedata[i][j][k] = 0;				}			}		}	}	// Write image data (filename specified by second argument) from image data matrix	if (!(file=fopen(argv[2],"wb"))) {		cout << "Cannot open file: " << argv[2] << endl;		exit(1);	}	fwrite(NewImagedata, sizeof(unsigned char), Sizeh*Sizew*BytesPerPixel, file);	fclose(file);	return 0;}