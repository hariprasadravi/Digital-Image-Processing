// EE569 Homework Assignment #1// Date:     Sep 18, 2016// Name:     Hariprasad Ravishankar// ID:       8991379333// Email:    hravisha@usc.edu#include <stdio.h>#include <iostream>#include <stdlib.h>using namespace std;int main(int argc, char *argv[]){	// Define file pointer and variables	FILE *file;	int BytesPerPixel;	int Sizeh = 250;	int Sizew = 300;	int x1,y1,x2,y2;		// Check for proper syntax	if (argc < 3){		cout << "Syntax Error - Incorrect Parameter Usage:" << endl;		cout << "program_name input_image.raw cropped_image.raw resized_image.raw [BytesPerPixel = 1] [Width = 256] [Height =256] [x1] [y1] [x2] [y2] [Resize]" << endl;		return 0;	}		// Check if image is grayscale or color	if (argc < 4){		BytesPerPixel = 1; // default is grey image	} 	else {		BytesPerPixel = atoi(argv[4]);		// Check if size is specified		if (argc >= 5){			Sizew = atoi(argv[5]);			Sizeh = atoi(argv[6]);			x1 = atoi(argv[7]);			y1 = atoi(argv[8]);			x2 = atoi(argv[9]);			y2 = atoi(argv[10]);		}	}		// Allocate image data array	///// First argument is height and second is width 	unsigned char Imagedata[Sizeh][Sizew][BytesPerPixel];	// Read image (filename specified by first argument) into image data matrix	if (!(file=fopen(argv[1],"rb"))) {		cout << "Cannot open file: " << argv[1] <<endl;		exit(1);	}	fread(Imagedata, sizeof(unsigned char), Sizeh*Sizew*BytesPerPixel, file);	fclose(file);		///////////////////////// INSERT YOUR PROCESSING CODE HERE /////////////////////////		////////////////////// Cropping the Image /////////////////////////////	int neww = x2-x1+1;	int newh = y2-y1+1;  	unsigned char NewImagedata[newh][neww][BytesPerPixel] ;  		if (x2<x1 || y2<y1){		cout<< " Please Enter correct coordinates"<<endl;	}	else{			for (int k = 0; k < BytesPerPixel; k++){			for(int i= x1;i <= x2;i++){				for(int j=y1;j <= y2;j++){														NewImagedata[j-y1][i-x1][k]= Imagedata[j][i][k];					}						}				}		}	////////////////////////// Writing to file /////////////////////////////	if (!(file=fopen(argv[2],"wb"))) {		cout << "Cannot open file: " << argv[2] << endl;		exit(1);	}	fwrite(NewImagedata, sizeof(unsigned char), (neww)*(newh)*(BytesPerPixel), file);	fclose(file);	//////////////////////////// Resizing ////////////////////////////////////////	int old_size = neww;	int new_size = atoi(argv[11]);	float x,y,a,b,p;	int nearest_x,nearest_y;	float ratioy = old_size/(float)new_size;	float ratiox = newh/(float)new_size;	unsigned char Resized_image[new_size][new_size][BytesPerPixel];		for (int k = 0; k < BytesPerPixel; k++){			for(int i= 0;i < new_size;i++){				for(int j=0;j < new_size;j++){											y = i * ratioy;						x = j * ratiox;						a = x - (int)x;						b = y - (int)y;						nearest_x = (int)x;						nearest_y = (int)y;												Resized_image[j][i][k] = (unsigned char)(int)(((1-b)*(((1-a)*(int)NewImagedata[nearest_x][nearest_y][k]) + (a*(int)NewImagedata[nearest_x+1][nearest_y][k]))) + b*(((1-a)*(int)NewImagedata[nearest_x][nearest_y+1][k]) + (a*(int)NewImagedata[nearest_x+1][nearest_y+1][k])));																}						}				}	// Write image data (filename specified by third argument) from image data matrix	if (!(file=fopen(argv[3],"wb"))) {		cout << "Cannot open file: " << argv[2] << endl;		exit(1);	}	fwrite(Resized_image, sizeof(unsigned char), (new_size)*(new_size)*(BytesPerPixel), file);	fclose(file);	return 0;}